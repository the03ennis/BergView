///A class representing a dining location as fetched at
///https://go.apis.huit.harvard.edu/ats/dining/v3/locations
class DiningLocation {
  ///The name of the location, e.g. "Annenberg"
  String locationName = "UNDEF";

  ///The id representing the location
  int locationNumber = -1;

  ///A list of events for today for this location
  Map<int, DiningMeal> meals = {};

  ///Determines whether or not this location is currently expanded in the UI
  bool isExpanded = false;

  DiningLocation(this.locationName, this.locationNumber);

  ///A constructor using a jsonMap from the [APIConnector]
  DiningLocation.fromJson(Map<String, dynamic> json) {
    locationName = json["location_name"];
    locationNumber = int.parse(json["location_number"]);
  }

  @override
  String toString() =>
      "$locationName, id $locationNumber with ${meals.length} meals";
}

///A class representing a meal
class DiningMeal {
  int mealId = -1;
  String mealName = "UNDEF";

  Map<int, DiningEvent> events = {};

  DiningMeal(this.mealId, this.mealName);

  @override
  String toString() => "Meal $mealName id $mealId with ${events.length} meals";
}

///A class representing dining events as fetched at
///https://go.apis.huit.harvard.edu/ats/dining/v3/events
class DiningEvent {
  ///The name of the meal, e.g. "Dinner"
  String mealName = "UNDEF";

  ///The id of the meal, e.g. 3 for dinner.
  int mealId = -1;

  ///The menu category, e.g. "entrees" or "desserts"
  String menuCategory = "UNDEF";

  ///The id for the menu category
  int menuCategoryId = -1;

  ///The date of serving
  DateTime serveDate = DateTime.now();

  ///A list of [DiningRecipe]s for this event
  List<DiningRecipe> recipes = [];

  ///Whether or not this event is expanded in the UI
  bool isExpanded = true;

  DiningEvent(this.mealName, this.mealId, this.menuCategory,
      this.menuCategoryId, this.serveDate);

  ///A constructor using a jsonMap from the [APIConnector]
  DiningEvent.fromJson(Map<String, dynamic> json) {
    mealName = json["meal_name"];
    mealId = json["meal_number"];
    menuCategory = json["menu_category_name"];
    menuCategoryId = int.parse(json["menu_category_number"]);
    serveDate = DateTime.tryParse(json["serve_date"]) ?? DateTime.now();
  }

  @override
  String toString() =>
      "Event $menuCategory id $menuCategoryId with ${recipes.length} recipes";
}

///A representation of a dining recipe, dynamically generated by https://javiercbk.github.io/json_to_dart/
///Accessible from https://go.apis.huit.harvard.edu/ats/dining/v3/recipes
class DiningRecipe {
  String? allergens;
  String? calories;
  String? caloriesFromFat;
  String? cateringDepartment;
  String? cholesterol;
  String? cholesterolDV;
  String? dietaryFiber;
  String? dietaryFiberDV;
  int? id;
  String? ingredientList;
  String? locationName;
  int? locationNumber;
  String? mealName;
  int? mealNumber;
  String? menuCategoryName;
  int? menuCategoryNumber;
  String? productionDepartment;
  String? protein;
  String? proteinDV;
  String? recipeName;
  String? recipeNumber;
  String? recipePrintAsCharacter;
  String? recipePrintAsColor;
  String? recipePrintAsName;
  String? recipeProductInformation;
  String? recipeWebCodes;
  String? satFat;
  String? satFatDV;
  String? serveDate;
  String? serviceDepartment;
  String? servingSize;
  String? sodium;
  String? sodiumDV;
  String? sugars;
  String? sugarsDV;
  String? totalCarb;
  String? totalCarbDV;
  String? totalFat;
  String? totalFatDV;
  String? transFat;
  String? transFatDV;
  DateTime? updateDate;
  String? portionCost;
  String? sellingPrice;

  DiningRecipe(
      this.allergens,
      this.calories,
      this.caloriesFromFat,
      this.cateringDepartment,
      this.cholesterol,
      this.cholesterolDV,
      this.dietaryFiber,
      this.dietaryFiberDV,
      this.id,
      this.ingredientList,
      this.locationName,
      this.locationNumber,
      this.mealName,
      this.mealNumber,
      this.menuCategoryName,
      this.menuCategoryNumber,
      this.productionDepartment,
      this.protein,
      this.proteinDV,
      this.recipeName,
      this.recipeNumber,
      this.recipePrintAsCharacter,
      this.recipePrintAsColor,
      this.recipePrintAsName,
      this.recipeProductInformation,
      this.recipeWebCodes,
      this.satFat,
      this.satFatDV,
      this.serveDate,
      this.serviceDepartment,
      this.servingSize,
      this.sodium,
      this.sodiumDV,
      this.sugars,
      this.sugarsDV,
      this.totalCarb,
      this.totalCarbDV,
      this.totalFat,
      this.totalFatDV,
      this.transFat,
      this.transFatDV,
      this.updateDate,
      this.portionCost,
      this.sellingPrice);

  DiningRecipe.fromJson(Map<String, dynamic> json) {
    allergens = json['Allergens'];
    calories = json['Calories'];
    caloriesFromFat = json['Calories_From_Fat'];
    cateringDepartment = json['Catering_Department'];
    cholesterol = json['Cholesterol'];
    cholesterolDV = json['Cholesterol_DV'];
    dietaryFiber = json['Dietary_Fiber'];
    dietaryFiberDV = json['Dietary_Fiber_DV'];
    id = json['ID'];
    ingredientList = json['Ingredient_List'];
    locationName = json['Location_Name'];
    locationNumber = int.parse(json['Location_Number']);
    mealName = json['Meal_Name'];
    mealNumber = json['Meal_Number'];
    menuCategoryName = json['Menu_Category_Name'];
    menuCategoryNumber = int.parse(json['Menu_Category_Number']);
    productionDepartment = json['Production_Department'];
    protein = json['Protein'];
    proteinDV = json['Protein_DV'];
    recipeName = json['Recipe_Name'];
    recipeNumber = json['Recipe_Number'];
    recipePrintAsCharacter = json['Recipe_Print_As_Character'];
    recipePrintAsColor = json['Recipe_Print_As_Color'];
    recipePrintAsName = json['Recipe_Print_As_Name'];
    recipeProductInformation = json['Recipe_Product_Information'];
    recipeWebCodes = json['Recipe_Web_Codes'];
    satFat = json['Sat_Fat'];
    satFatDV = json['Sat_Fat_DV'];
    serveDate = json['Serve_Date'];
    serviceDepartment = json['Service_Department'];
    servingSize = json['Serving_Size'];
    sodium = json['Sodium'];
    sodiumDV = json['Sodium_DV'];
    sugars = json['Sugars'];
    sugarsDV = json['Sugars_DV'];
    totalCarb = json['Total_Carb'];
    totalCarbDV = json['Total_Carb_DV'];
    totalFat = json['Total_Fat'];
    totalFatDV = json['Total_Fat_DV'];
    transFat = json['Trans_Fat'];
    transFatDV = json['Trans_Fat_DV'];
    updateDate = json['Update_Date'];
    portionCost = json['portion_cost'];
    sellingPrice = json['selling_price'];
  }

  @override
  String toString() => mealName ?? "undef";
}
